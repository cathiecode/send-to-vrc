// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getArgs() : Promise<string[]> {
    return await TAURI_INVOKE("get_args");
},
async openResourceDir() : Promise<Result<null, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_resource_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadConfigFile() : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_config_file") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveConfigFile(contents: string) : Promise<Result<null, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_config_file", { contents }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSystemLocale() : Promise<string> {
    return await TAURI_INVOKE("get_system_locale");
},
async isAbleToReadImageFile(filePath: string) : Promise<Result<boolean, null>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_able_to_read_image_file", { filePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async uploadImageToVideoServer(filePath: string, apiKey: string, uploaderBaseUrl: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("upload_image_to_video_server", { filePath, apiKey, uploaderBaseUrl }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async uploadImageToImageServer(filePath: string, apiKey: string, uploaderBaseUrl: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("upload_image_to_image_server", { filePath, apiKey, uploaderBaseUrl }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async uploadImageToVrchatPrint(filePath: string, vrchatApiKey: string) : Promise<Result<null, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("upload_image_to_vrchat_print", { filePath, vrchatApiKey }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async registerAnonymously(acceptedTosVersion: number, uploaderBaseUrl: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("register_anonymously", { acceptedTosVersion, uploaderBaseUrl }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTosAndVersion(uploaderBaseUrl: string) : Promise<Result<Tos, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_tos_and_version", { uploaderBaseUrl }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startCapture() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_capture") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopCapture() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_capture") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async finishCaptureWithCroppedRect(monitorId: string, rect: NormalizedRect) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("finish_capture_with_cropped_rect", { monitorId, rect }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCaptureUrlCommand(monitorId: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_capture_url_command", { monitorId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type AppError = { type: "ConfigContents"; message: string } | { type: "ConfigExistance"; message: string } | { type: "ConfigDirectoryExistance"; message: string } | { type: "UploaderAuthRequired"; message: string } | { type: "Unknown"; message: string }
export type NormalizedRect = { x1: number; y1: number; x2: number; y2: number }
export type Tos = { version: number; content: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
